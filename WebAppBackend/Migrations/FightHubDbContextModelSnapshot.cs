// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppBackend.Configurations;

#nullable disable

namespace WebAppBackend.Migrations
{
    [DbContext(typeof(FightHubDbContext))]
    partial class FightHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContactDataPhoneNumber", b =>
                {
                    b.Property<int>("ContactDatasId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumbersId")
                        .HasColumnType("int");

                    b.HasKey("ContactDatasId", "PhoneNumbersId");

                    b.HasIndex("PhoneNumbersId");

                    b.ToTable("ContactDatasPhoneNumbers", (string)null);
                });

            modelBuilder.Entity("FighterTrainingBootcamp", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingBootcampsAsStudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentsId", "TrainingBootcampsAsStudentId");

                    b.HasIndex("TrainingBootcampsAsStudentId");

                    b.ToTable("TrainingBootcampsStudents", (string)null);
                });

            modelBuilder.Entity("NameUser", b =>
                {
                    b.Property<int>("NamesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("NamesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("NameUser");
                });

            modelBuilder.Entity("WebAppBackend.Models.ContactData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ContactDatas");
                });

            modelBuilder.Entity("WebAppBackend.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudienceType")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.Property<int?>("AvailablePlaces")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("MoneyPrize")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonOfCancel")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateOnly>("RegistrationEndDate")
                        .HasColumnType("date");

                    b.Property<double?>("TicketPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebAppBackend.Models.FanInvolvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("FanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TicketBuyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FanId");

                    b.ToTable("FanInvolvements");
                });

            modelBuilder.Entity("WebAppBackend.Models.FighterInvolvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EarnedPlace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("FighterId")
                        .HasColumnType("int");

                    b.Property<string>("NumberID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FighterId");

                    b.ToTable("FighterInvolvements");
                });

            modelBuilder.Entity("WebAppBackend.Models.FinancialRaport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<double>("Expenditure")
                        .HasColumnType("float");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<string>("NumberId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.ToTable("FinancialRaports");
                });

            modelBuilder.Entity("WebAppBackend.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInHours")
                        .HasColumnType("int");

                    b.Property<string>("LessonSubject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TrainingBootcampId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingBootcampId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("WebAppBackend.Models.MartialArt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MartialArts");
                });

            modelBuilder.Entity("WebAppBackend.Models.MedicalCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("FighterId")
                        .HasColumnType("int");

                    b.Property<int>("FighterInvolvementId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("NumberId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WorkerFanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FighterId");

                    b.HasIndex("FighterInvolvementId");

                    b.HasIndex("WorkerFanId");

                    b.ToTable("MedicalCertificates");
                });

            modelBuilder.Entity("WebAppBackend.Models.Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("WebAppBackend.Models.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("WebAppBackend.Models.SkillLevelOfMartialArt", b =>
                {
                    b.Property<int>("FighterId")
                        .HasColumnType("int");

                    b.Property<int>("MartialArtId")
                        .HasColumnType("int");

                    b.Property<string>("Belt")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.HasKey("FighterId", "MartialArtId");

                    b.HasIndex("MartialArtId");

                    b.HasIndex("FighterId", "MartialArtId")
                        .IsUnique();

                    b.ToTable("SkillLevelOfMartialArts");
                });

            modelBuilder.Entity("WebAppBackend.Models.TrainingBootcamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Belt")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MartialArtName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MartialArtName");

                    b.HasIndex("MasterId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("TrainingBootcamps");
                });

            modelBuilder.Entity("WebAppBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("ContactDataId")
                        .HasColumnType("int");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContactDataId");

                    b.HasIndex("PESEL")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebAppBackend.Models.WorkerFanWorkerFanType", b =>
                {
                    b.Property<int>("WorkerFanId")
                        .HasColumnType("int");

                    b.Property<string>("WorkerFanType")
                        .HasColumnType("varchar(5)");

                    b.HasKey("WorkerFanId", "WorkerFanType");

                    b.ToTable("WorkerFanWorkerFanTypes");
                });

            modelBuilder.Entity("WebAppBackend.Models.Show", b =>
                {
                    b.HasBaseType("WebAppBackend.Models.Event");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Shows", (string)null);
                });

            modelBuilder.Entity("WebAppBackend.Models.Tournament", b =>
                {
                    b.HasBaseType("WebAppBackend.Models.Event");

                    b.Property<string>("Belt")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.ToTable("Tournaments", (string)null);
                });

            modelBuilder.Entity("WebAppBackend.Models.Fighter", b =>
                {
                    b.HasBaseType("WebAppBackend.Models.User");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.ToTable("Fighters", (string)null);
                });

            modelBuilder.Entity("WebAppBackend.Models.WorkerFan", b =>
                {
                    b.HasBaseType("WebAppBackend.Models.User");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateOnly>("DateOfHirement")
                        .HasColumnType("date");

                    b.Property<string>("DoctorLicenceID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FavouriteMartialArtName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.ToTable("WorkerFans", (string)null);
                });

            modelBuilder.Entity("ContactDataPhoneNumber", b =>
                {
                    b.HasOne("WebAppBackend.Models.ContactData", null)
                        .WithMany()
                        .HasForeignKey("ContactDatasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.PhoneNumber", null)
                        .WithMany()
                        .HasForeignKey("PhoneNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FighterTrainingBootcamp", b =>
                {
                    b.HasOne("WebAppBackend.Models.Fighter", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.TrainingBootcamp", null)
                        .WithMany()
                        .HasForeignKey("TrainingBootcampsAsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NameUser", b =>
                {
                    b.HasOne("WebAppBackend.Models.Name", null)
                        .WithMany()
                        .HasForeignKey("NamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppBackend.Models.Event", b =>
                {
                    b.HasOne("WebAppBackend.Models.WorkerFan", "WorkerFan")
                        .WithMany("OrganizedEvents")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("WebAppBackend.Models.AddressData", "Localization", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("int");

                            b1.Property<int?>("ApartmentNumber")
                                .HasColumnType("int")
                                .HasColumnName("ApartmentNumber");

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Localization")
                        .IsRequired();

                    b.Navigation("WorkerFan");
                });

            modelBuilder.Entity("WebAppBackend.Models.FanInvolvement", b =>
                {
                    b.HasOne("WebAppBackend.Models.Event", "Event")
                        .WithMany("FanInvolvements")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.WorkerFan", "WorkerFan")
                        .WithMany("FanInvolvements")
                        .HasForeignKey("FanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("WorkerFan");
                });

            modelBuilder.Entity("WebAppBackend.Models.FighterInvolvement", b =>
                {
                    b.HasOne("WebAppBackend.Models.Event", "Event")
                        .WithMany("FighterInvolvements")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.Fighter", "Fighter")
                        .WithMany("FighterInvolvements")
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Fighter");
                });

            modelBuilder.Entity("WebAppBackend.Models.Lesson", b =>
                {
                    b.HasOne("WebAppBackend.Models.TrainingBootcamp", "TrainingBootcamp")
                        .WithMany("Lessons")
                        .HasForeignKey("TrainingBootcampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebAppBackend.Models.AddressData", "Localization", b1 =>
                        {
                            b1.Property<int>("LessonId")
                                .HasColumnType("int");

                            b1.Property<int?>("ApartmentNumber")
                                .HasColumnType("int")
                                .HasColumnName("ApartmentNumber");

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("LessonId");

                            b1.ToTable("Lessons");

                            b1.WithOwner()
                                .HasForeignKey("LessonId");
                        });

                    b.Navigation("Localization")
                        .IsRequired();

                    b.Navigation("TrainingBootcamp");
                });

            modelBuilder.Entity("WebAppBackend.Models.MedicalCertificate", b =>
                {
                    b.HasOne("WebAppBackend.Models.Fighter", "Fighter")
                        .WithMany("MedicalCertificates")
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.FighterInvolvement", "FighterInvolvement")
                        .WithMany()
                        .HasForeignKey("FighterInvolvementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.WorkerFan", "WorkerFan")
                        .WithMany("MedicalCertificates")
                        .HasForeignKey("WorkerFanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fighter");

                    b.Navigation("FighterInvolvement");

                    b.Navigation("WorkerFan");
                });

            modelBuilder.Entity("WebAppBackend.Models.SkillLevelOfMartialArt", b =>
                {
                    b.HasOne("WebAppBackend.Models.Fighter", "Fighter")
                        .WithMany("SkillLevels")
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.MartialArt", "MartialArt")
                        .WithMany("SkillLevels")
                        .HasForeignKey("MartialArtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fighter");

                    b.Navigation("MartialArt");
                });

            modelBuilder.Entity("WebAppBackend.Models.TrainingBootcamp", b =>
                {
                    b.HasOne("WebAppBackend.Models.MartialArt", "MartialArt")
                        .WithMany("TrainingBootcamps")
                        .HasForeignKey("MartialArtName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.Fighter", "Master")
                        .WithMany("TrainingBootcampsAsMaster")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAppBackend.Models.WorkerFan", "WorkerFan")
                        .WithMany("OrganizedTrainingBootcamps")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MartialArt");

                    b.Navigation("Master");

                    b.Navigation("WorkerFan");
                });

            modelBuilder.Entity("WebAppBackend.Models.User", b =>
                {
                    b.HasOne("WebAppBackend.Models.ContactData", "ContactData")
                        .WithMany()
                        .HasForeignKey("ContactDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WebAppBackend.Models.AddressData", "AddressData", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<int?>("ApartmentNumber")
                                .HasColumnType("int")
                                .HasColumnName("ApartmentNumber");

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("AddressData")
                        .IsRequired();

                    b.Navigation("ContactData");
                });

            modelBuilder.Entity("WebAppBackend.Models.WorkerFanWorkerFanType", b =>
                {
                    b.HasOne("WebAppBackend.Models.WorkerFan", "WorkerFan")
                        .WithMany("WorkerFanTypes")
                        .HasForeignKey("WorkerFanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkerFan");
                });

            modelBuilder.Entity("WebAppBackend.Models.Show", b =>
                {
                    b.HasOne("WebAppBackend.Models.Event", null)
                        .WithOne()
                        .HasForeignKey("WebAppBackend.Models.Show", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppBackend.Models.Tournament", b =>
                {
                    b.HasOne("WebAppBackend.Models.Event", null)
                        .WithOne()
                        .HasForeignKey("WebAppBackend.Models.Tournament", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppBackend.Models.Fighter", b =>
                {
                    b.HasOne("WebAppBackend.Models.User", null)
                        .WithOne()
                        .HasForeignKey("WebAppBackend.Models.Fighter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppBackend.Models.WorkerFan", b =>
                {
                    b.HasOne("WebAppBackend.Models.User", null)
                        .WithOne()
                        .HasForeignKey("WebAppBackend.Models.WorkerFan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppBackend.Models.Event", b =>
                {
                    b.Navigation("FanInvolvements");

                    b.Navigation("FighterInvolvements");
                });

            modelBuilder.Entity("WebAppBackend.Models.MartialArt", b =>
                {
                    b.Navigation("SkillLevels");

                    b.Navigation("TrainingBootcamps");
                });

            modelBuilder.Entity("WebAppBackend.Models.TrainingBootcamp", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("WebAppBackend.Models.Fighter", b =>
                {
                    b.Navigation("FighterInvolvements");

                    b.Navigation("MedicalCertificates");

                    b.Navigation("SkillLevels");

                    b.Navigation("TrainingBootcampsAsMaster");
                });

            modelBuilder.Entity("WebAppBackend.Models.WorkerFan", b =>
                {
                    b.Navigation("FanInvolvements");

                    b.Navigation("MedicalCertificates");

                    b.Navigation("OrganizedEvents");

                    b.Navigation("OrganizedTrainingBootcamps");

                    b.Navigation("WorkerFanTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
